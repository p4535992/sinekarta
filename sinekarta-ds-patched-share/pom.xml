<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>it.abd.alfresco.sign</groupId>
  <artifactId>sinekarta-ds-patched-share</artifactId>
  <version>0.0.2-SNAPSHOT</version>
  
  <properties>
        <!-- RUN MAVEN CON clean source:jar package assembly:single -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.build.targetEncoding>UTF-8</project.build.targetEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
		<timestamp>${maven.build.timestamp}</timestamp>
		<maven.build.timestamp.format>yyyyMMdd.HHmmss</maven.build.timestamp.format>
		<!-- Alfresco Maven Plugin version 3.0.1 -->
		<alfresco.groupId>org.alfresco</alfresco.groupId>
        <alfresco.sdk.version>3.0.1</alfresco.sdk.version>
        <alfresco.share.version>5.2.e</alfresco.share.version>    
        <alfresco.surf.version>6.11</alfresco.surf.version> 
        <maven.alfresco.edition>community</maven.alfresco.edition> 
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
	            <groupId>${alfresco.groupId}</groupId>
	            <artifactId>share</artifactId>
	            <version>${alfresco.share.version}</version>
	            <classifier>classes</classifier>
	            <scope>provided</scope>
	        </dependency>
	
	        <dependency>
	            <groupId>org.alfresco.surf</groupId>
	            <artifactId>spring-surf-api</artifactId>
	            <version>${alfresco.surf.version}</version>
	            <scope>provided</scope>
	        </dependency>
        </dependencies>
    </dependencyManagement>

    <!-- Following dependencies are needed for compiling Java code in src/main/java;  -->
    <dependencies>
    	<dependency>
            <groupId>${alfresco.groupId}</groupId>
            <artifactId>share</artifactId>
            <version>${alfresco.share.version}</version>
            <classifier>classes</classifier>
            <scope>provided</scope>
        </dependency>

		<dependency>
			<groupId>org.alfresco.surf</groupId>
			<artifactId>spring-surf-api</artifactId>
			<version>${alfresco.surf.version}</version>
			<scope>provided</scope>
		</dependency>	
		
		<!-- COMMON JAR ALFRESCO REPOSITORY -->
        
        <dependency>
          <groupId>it.abd.alfresco.sign</groupId>
		  <artifactId>sinekarta-ds-patched-repo</artifactId>
		  <version>0.0.2-SNAPSHOT</version>
        </dependency>
        
    </dependencies>
    
   <build>
        <plugins>
        	 <plugin>
                <groupId>org.alfresco.maven.plugin</groupId>
                <artifactId>alfresco-maven-plugin</artifactId>
                <version>${alfresco.sdk.version}</version>
                <configuration>

                    <!-- We assume that the platform/repository is already running on localhost:8080 -->
                    <enableH2>false</enableH2>
                    <enablePlatform>false</enablePlatform>
                    <enableSolr>false</enableSolr>

                    <!-- Enable the Share webapp, which is what we customize with Share JAR modules -->
                    <enableShare>true</enableShare>

                    <!--
                       JARs and AMPs that should be overlayed/applied to the Share WAR
                       (i.e. share.war)
                   -->
                    <shareModules>
                        <!-- Bring in this JAR project, need to be included here, otherwise share-config-custom.xml
                             will not be picked up. It will not be read from target/classes/META-INF -->
                        <moduleDependency>
                            <groupId>${project.groupId}</groupId>
                            <artifactId>${project.artifactId}</artifactId>
                            <version>${project.version}</version>
                        </moduleDependency>
                    </shareModules>
                </configuration>
            </plugin>

            <!-- Build an AMP if 3rd party libs are needed by the extension -->
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.6</version>
                <executions>
                    <execution>
                        <id>build-amp-file</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <appendAssemblyId>false</appendAssemblyId>
                    <descriptor>src/main/assembly/amp.xml</descriptor>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.alfresco.maven.plugin</groupId>
                        <artifactId>alfresco-maven-plugin</artifactId>
                        <version>${alfresco.sdk.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
            
            <plugin>
	          <groupId>org.apache.maven.plugins</groupId>
	          <artifactId>maven-compiler-plugin</artifactId>	         
	          <configuration>
	             <source>1.8</source>
		          <target>1.8</target>
		          <encoding>${project.build.sourceEncoding}</encoding> 
	          </configuration>
	        </plugin>
            <!-- Compress JavaScript files and store as *-min.js -->
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>yuicompressor-maven-plugin</artifactId>
            </plugin>
            <plugin>
			   <groupId>org.apache.maven.plugins</groupId>
			   <artifactId>maven-release-plugin</artifactId>
			   <version>2.5.3</version>
			   <configuration>
			    <goals>deploy</goals>
			    <tagNameFormat>Alfresco52/@{project.artifactId}/@{project.version}/@{project.artifactId}</tagNameFormat>
			   </configuration>
			  </plugin>
        </plugins>
	   	<!-- Overrinding Resources of parent pom -->
	   	<!--
		This is done by the maven-resources-plugin and configured in <build> / <resources>. 
		Each <resource> definition in there has a <filtered>true|false</filtered> option that 
		controls whether maven should replace properties like ${project.artifactId} when copying 
		the resources over or not.
		-->
		<resources>
		    <!-- Filter the resource files in this project and do property substitutions -->  
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
			<!-- Exclusion of files self-generated by Eclipse and Exclusion files that use markers similar to those used by maven  -->						 
			<resource>
				<directory>src/main/resources</directory>
				<targetPath>${project.build.directory}</targetPath>
				<filtering>true</filtering>
				<excludes>					
					<exclude>**/*.jsfdia</exclude>
					<exclude>**/*.ftl</exclude>
					<exclude>**/*.jasper</exclude>
					<exclude>**/*.ks</exclude>
					<exclude>**/*.png</exclude>
					<exclude>**/*.jpg</exclude>
					<exclude>**/*.jpeg</exclude>
					<exclude>**/*.gif</exclude>
					<exclude>**/*.bmp</exclude>				
				</excludes>
			</resource>		
			<!-- Inclusion of resources that use markers similar to those used by maven putting the filtering to false, so the tags are not replaced -->			 		
			<resource>
				<directory>src/main/resources</directory>
				<targetPath>${project.build.directory}</targetPath>
				<filtering>false</filtering>
				<includes>
					<include>**/*.ftl</include>
					<include>**/*.jasper</include>
					<include>**/*.ks</include>
					<include>**/*.png</include>
					<include>**/*.jpg</include>
					<include>**/*.jpeg</include>
					<include>**/*.gif</include>
					<include>**/*.bmp</include>
				</includes>
			</resource>
			
		</resources>
    </build>
</project>